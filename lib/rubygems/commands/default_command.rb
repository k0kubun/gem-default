require 'fileutils'
require 'rubygems/command_manager'

class Gem::Commands::DefaultCommand < Gem::Command
  def initialize(output = STDOUT)
    super 'default', description
    @output = output

    add_option('-v', '--version VERSION', 'Gem version to be a default gem') do |version, _options|
      options[:version] = version
    end
  end

  def usage
    "#{program_name} GEMNAME"
  end

  def description
    'Allows you to change an arbitrary installed gem to a default gem'
  end

  def execute
    gem_name = options[:args][0]
    if gem_name.nil?
      abort 'gem name is not specified. Usage: `gem default gem_name -v 1.2.3`'
    end

    DefaultGemInstaller.new(
      gem_home: Gem.paths.home,
      ruby_arch_dir: RbConfig::CONFIG['rubyarchdir'],
      ruby_bin_dir: RbConfig::CONFIG['bindir'],
      ruby_lib_dir: RbConfig::CONFIG['rubylibdir'],
      dlext: RbConfig::CONFIG['DLEXT'],
    ).install(gem_name, version: options[:version])
  end

  class DefaultGemInstaller
    def initialize(gem_home:, ruby_arch_dir:, ruby_bin_dir:, ruby_lib_dir:, dlext:)
      @gem_home = gem_home
      @ruby_arch_dir = ruby_arch_dir
      @ruby_bin_dir = ruby_bin_dir
      @ruby_lib_dir = ruby_lib_dir
      @dlext = dlext
    end

    def install(gem_name, version:)
      begin
        spec = Gem::Dependency.new(gem_name, version).to_spec
      rescue Gem::MissingSpecError => e
        puts "#{e.class}: #{e.message}\n\n"
        abort "#{bold('Note:')} You need to run `gem install #{gem_name}` before `gem default #{gem_name}`."
      end
      install_spec(spec)
    end

    private

    def install_spec(spec)
      install_dependencies(spec)

      spec.require_paths.each do |require_path|
        case require_path
        when 'lib'
          from = File.join(spec.gem_dir, require_path)
          to = @ruby_lib_dir
          glob_path = '**/*.rb'
        when /\A#{Regexp.escape(File.join(@gem_home, 'extensions'))}/
          from = require_path
          to = @ruby_arch_dir
          glob_path = "**/*.#{@dlext}"
        else
          raise "Unexpected require_path #{require_path.dump} is found in #{spec.name.dump}."
        end

        files = Dir.glob(File.join(from, glob_path)).select(&File.method(:file?)).map! do |path|
          # delete_prefix is from Ruby 2.5 and too new
          path.sub(/\A#{Regexp.escape(from)}/, '')
        end.sort!
        copy_files(files, from: from, to: to)
      end

      # Overwrite bin scripts generated by RubyGems which require "Gemfile" specification.
      copy_files(spec.executables, from: spec.bin_dir, to: @ruby_bin_dir, preserve_old: true)
      # copy_files(spec.executables, from: spec.bin_dir, to: File.join(@gem_home, 'bin'), preserve_old: true)
    end

    # TODO: resolve dependencies properly. For example, circular dependency might
    # loop infinitely and duplicated dependencies might be installed several times.
    def install_dependencies(spec)
      spec.runtime_dependencies.each do |dependency|
        install_spec(dependency.to_spec)
      end
    end

    def copy_files(files, from:, to:, preserve_old: false)
      puts "#{bold('=> Copying files')} from #{from.dump} to:"
      files.each do |file|
        from_path = File.join(from, file)
        to_path = File.join(to, file)
        old_path = "#{to_path}.old"

        if preserve_old && File.exist?(to_path) && !File.exist?(old_path)
          puts "#{to_path} (original => #{old_path})"
          FileUtils.cp(to_path, old_path)
        else
          puts to_path
        end
        FileUtils.mkdir_p(File.dirname(to_path))
        FileUtils.cp(from_path, to_path)
      end
      puts
    end

    def bold(text)
      "\e[1m#{text}\e[0m"
    end
  end
  private_constant :DefaultGemInstaller
end

Gem::CommandManager.instance.register_command :default
